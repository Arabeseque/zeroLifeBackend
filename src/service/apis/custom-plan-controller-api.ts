// tslint:disable
/**
 * 健康助手后台
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomPlanVo } from '../models';
// @ts-ignore
import { FormResult } from '../models';
// @ts-ignore
import { Result } from '../models';
/**
 * CustomPlanControllerApi - axios parameter creator
 * @export
 */
export const CustomPlanControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 根据id批量删除自定义营养计划表
         * @summary 根据id批量删除自定义营养计划表
         * @param {Array<string>} customPlanVoIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        custompPlanDelete: async (customPlanVoIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'customPlanVoIds' is not null or undefined
            if (customPlanVoIds === null || customPlanVoIds === undefined) {
                throw new RequiredError('customPlanVoIds','Required parameter customPlanVoIds was null or undefined when calling custompPlanDelete.');
            }
            const localVarPath = `/custompPlan/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (customPlanVoIds) {
                localVarQueryParameter['customPlanVoIds'] = customPlanVoIds;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 分页查询所有自定义营养计划表
         * @summary 分页查询所有自定义营养计划表
         * @param {number} page 
         * @param {number} num 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        custompPlanGet: async (page: number, num: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling custompPlanGet.');
            }
            // verify required parameter 'num' is not null or undefined
            if (num === null || num === undefined) {
                throw new RequiredError('num','Required parameter num was null or undefined when calling custompPlanGet.');
            }
            const localVarPath = `/custompPlan/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (num !== undefined) {
                localVarQueryParameter['num'] = num;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据用户名称模糊分页查询所有自定义营养计划表
         * @summary 根据用户名称模糊分页查询所有自定义营养计划表
         * @param {string} page 
         * @param {string} num 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        custompPlanPageNumGet: async (page: string, num: string, name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling custompPlanPageNumGet.');
            }
            // verify required parameter 'num' is not null or undefined
            if (num === null || num === undefined) {
                throw new RequiredError('num','Required parameter num was null or undefined when calling custompPlanPageNumGet.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling custompPlanPageNumGet.');
            }
            const localVarPath = `/custompPlan/{page}/{num}`
                .replace(`{${"page"}}`, encodeURIComponent(String(page)))
                .replace(`{${"num"}}`, encodeURIComponent(String(num)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 增加自定义营养计划表(id需要为null)
         * @summary 增加自定义营养计划表(id需要为null)
         * @param {CustomPlanVo} [customPlanVo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        custompPlanPost: async (customPlanVo?: CustomPlanVo, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/custompPlan/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof customPlanVo !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(customPlanVo !== undefined ? customPlanVo : {}) : (customPlanVo || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 修改自定义营养计划表
         * @summary 修改自定义营养计划表
         * @param {CustomPlanVo} [customPlanVo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        custompPlanPut: async (customPlanVo?: CustomPlanVo, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/custompPlan/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof customPlanVo !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(customPlanVo !== undefined ? customPlanVo : {}) : (customPlanVo || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomPlanControllerApi - functional programming interface
 * @export
 */
export const CustomPlanControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 根据id批量删除自定义营养计划表
         * @summary 根据id批量删除自定义营养计划表
         * @param {Array<string>} customPlanVoIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async custompPlanDelete(customPlanVoIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await CustomPlanControllerApiAxiosParamCreator(configuration).custompPlanDelete(customPlanVoIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 分页查询所有自定义营养计划表
         * @summary 分页查询所有自定义营养计划表
         * @param {number} page 
         * @param {number} num 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async custompPlanGet(page: number, num: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormResult>> {
            const localVarAxiosArgs = await CustomPlanControllerApiAxiosParamCreator(configuration).custompPlanGet(page, num, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 根据用户名称模糊分页查询所有自定义营养计划表
         * @summary 根据用户名称模糊分页查询所有自定义营养计划表
         * @param {string} page 
         * @param {string} num 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async custompPlanPageNumGet(page: string, num: string, name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormResult>> {
            const localVarAxiosArgs = await CustomPlanControllerApiAxiosParamCreator(configuration).custompPlanPageNumGet(page, num, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 增加自定义营养计划表(id需要为null)
         * @summary 增加自定义营养计划表(id需要为null)
         * @param {CustomPlanVo} [customPlanVo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async custompPlanPost(customPlanVo?: CustomPlanVo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await CustomPlanControllerApiAxiosParamCreator(configuration).custompPlanPost(customPlanVo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 修改自定义营养计划表
         * @summary 修改自定义营养计划表
         * @param {CustomPlanVo} [customPlanVo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async custompPlanPut(customPlanVo?: CustomPlanVo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await CustomPlanControllerApiAxiosParamCreator(configuration).custompPlanPut(customPlanVo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CustomPlanControllerApi - factory interface
 * @export
 */
export const CustomPlanControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 根据id批量删除自定义营养计划表
         * @summary 根据id批量删除自定义营养计划表
         * @param {Array<string>} customPlanVoIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        custompPlanDelete(customPlanVoIds: Array<string>, options?: any): AxiosPromise<Result> {
            return CustomPlanControllerApiFp(configuration).custompPlanDelete(customPlanVoIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 分页查询所有自定义营养计划表
         * @summary 分页查询所有自定义营养计划表
         * @param {number} page 
         * @param {number} num 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        custompPlanGet(page: number, num: number, options?: any): AxiosPromise<FormResult> {
            return CustomPlanControllerApiFp(configuration).custompPlanGet(page, num, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据用户名称模糊分页查询所有自定义营养计划表
         * @summary 根据用户名称模糊分页查询所有自定义营养计划表
         * @param {string} page 
         * @param {string} num 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        custompPlanPageNumGet(page: string, num: string, name: string, options?: any): AxiosPromise<FormResult> {
            return CustomPlanControllerApiFp(configuration).custompPlanPageNumGet(page, num, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 增加自定义营养计划表(id需要为null)
         * @summary 增加自定义营养计划表(id需要为null)
         * @param {CustomPlanVo} [customPlanVo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        custompPlanPost(customPlanVo?: CustomPlanVo, options?: any): AxiosPromise<Result> {
            return CustomPlanControllerApiFp(configuration).custompPlanPost(customPlanVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 修改自定义营养计划表
         * @summary 修改自定义营养计划表
         * @param {CustomPlanVo} [customPlanVo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        custompPlanPut(customPlanVo?: CustomPlanVo, options?: any): AxiosPromise<Result> {
            return CustomPlanControllerApiFp(configuration).custompPlanPut(customPlanVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomPlanControllerApi - object-oriented interface
 * @export
 * @class CustomPlanControllerApi
 * @extends {BaseAPI}
 */
export class CustomPlanControllerApi extends BaseAPI {
    /**
     * 根据id批量删除自定义营养计划表
     * @summary 根据id批量删除自定义营养计划表
     * @param {Array<string>} customPlanVoIds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomPlanControllerApi
     */
    public custompPlanDelete(customPlanVoIds: Array<string>, options?: any) {
        return CustomPlanControllerApiFp(this.configuration).custompPlanDelete(customPlanVoIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 分页查询所有自定义营养计划表
     * @summary 分页查询所有自定义营养计划表
     * @param {number} page 
     * @param {number} num 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomPlanControllerApi
     */
    public custompPlanGet(page: number, num: number, options?: any) {
        return CustomPlanControllerApiFp(this.configuration).custompPlanGet(page, num, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据用户名称模糊分页查询所有自定义营养计划表
     * @summary 根据用户名称模糊分页查询所有自定义营养计划表
     * @param {string} page 
     * @param {string} num 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomPlanControllerApi
     */
    public custompPlanPageNumGet(page: string, num: string, name: string, options?: any) {
        return CustomPlanControllerApiFp(this.configuration).custompPlanPageNumGet(page, num, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 增加自定义营养计划表(id需要为null)
     * @summary 增加自定义营养计划表(id需要为null)
     * @param {CustomPlanVo} [customPlanVo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomPlanControllerApi
     */
    public custompPlanPost(customPlanVo?: CustomPlanVo, options?: any) {
        return CustomPlanControllerApiFp(this.configuration).custompPlanPost(customPlanVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 修改自定义营养计划表
     * @summary 修改自定义营养计划表
     * @param {CustomPlanVo} [customPlanVo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomPlanControllerApi
     */
    public custompPlanPut(customPlanVo?: CustomPlanVo, options?: any) {
        return CustomPlanControllerApiFp(this.configuration).custompPlanPut(customPlanVo, options).then((request) => request(this.axios, this.basePath));
    }

}
