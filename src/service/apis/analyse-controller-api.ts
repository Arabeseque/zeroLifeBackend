// tslint:disable
/**
 * 健康助手后台
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Result } from '../models';
/**
 * AnalyseControllerApi - axios parameter creator
 * @export
 */
export const AnalyseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 获取总结
         * @summary 获取总结
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyseGetsummaryGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/analyse/getsummary`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 计算健康用户的占比（判断没有疾病并且bmi正常）
         * @summary 计算健康用户的占比（判断没有疾病并且bmi正常）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyseHealthProportionGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/analyse/healthProportion`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 健康省份的热门食物
         * @summary 健康省份的热门食物
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyseHotFoodByHealthProvinceGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/analyse/hotFoodByHealthProvince`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 统计每天热门食物（后期才会有数据，现在暂时用月度热门前十替代，别忘了）
         * @summary 统计当天的热门食物
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyseHotFoodsByDayGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/analyse/hotFoodsByDay`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 统计本月前十名热门食物(数据的顺序就是排名，越往上的次数越多)
         * @summary 统计本月前十名热门食物
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyseHotFoodsByMonthGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/analyse/hotFoodsByMonth`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 统计本年前十名热门食物(数据的顺序就是排名，越往上的次数越多)
         * @summary 统计本年前十名热门食物
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyseHotFoodsByYearGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/analyse/hotFoodsByYear`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 统计月度健康用户的热门食物
         * @summary 统计月度健康用户的热门食物
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyseMonthlyHealthFoodsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/analyse/MonthlyHealthFoods`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 计算每个省的平均营养值
         * @summary 计算每个省的平均营养值
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyseProvinceGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/analyse/province`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 计算非健康用户的占比（患病或BMI不正常）
         * @summary 计算非健康用户的占比（患病或BMI不正常）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyseUnHealthProportionGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/analyse/unHealthProportion`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnalyseControllerApi - functional programming interface
 * @export
 */
export const AnalyseControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 获取总结
         * @summary 获取总结
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyseGetsummaryGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await AnalyseControllerApiAxiosParamCreator(configuration).analyseGetsummaryGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 计算健康用户的占比（判断没有疾病并且bmi正常）
         * @summary 计算健康用户的占比（判断没有疾病并且bmi正常）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyseHealthProportionGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await AnalyseControllerApiAxiosParamCreator(configuration).analyseHealthProportionGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 健康省份的热门食物
         * @summary 健康省份的热门食物
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyseHotFoodByHealthProvinceGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await AnalyseControllerApiAxiosParamCreator(configuration).analyseHotFoodByHealthProvinceGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 统计每天热门食物（后期才会有数据，现在暂时用月度热门前十替代，别忘了）
         * @summary 统计当天的热门食物
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyseHotFoodsByDayGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await AnalyseControllerApiAxiosParamCreator(configuration).analyseHotFoodsByDayGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 统计本月前十名热门食物(数据的顺序就是排名，越往上的次数越多)
         * @summary 统计本月前十名热门食物
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyseHotFoodsByMonthGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await AnalyseControllerApiAxiosParamCreator(configuration).analyseHotFoodsByMonthGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 统计本年前十名热门食物(数据的顺序就是排名，越往上的次数越多)
         * @summary 统计本年前十名热门食物
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyseHotFoodsByYearGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await AnalyseControllerApiAxiosParamCreator(configuration).analyseHotFoodsByYearGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 统计月度健康用户的热门食物
         * @summary 统计月度健康用户的热门食物
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyseMonthlyHealthFoodsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await AnalyseControllerApiAxiosParamCreator(configuration).analyseMonthlyHealthFoodsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 计算每个省的平均营养值
         * @summary 计算每个省的平均营养值
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyseProvinceGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await AnalyseControllerApiAxiosParamCreator(configuration).analyseProvinceGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 计算非健康用户的占比（患病或BMI不正常）
         * @summary 计算非健康用户的占比（患病或BMI不正常）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyseUnHealthProportionGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await AnalyseControllerApiAxiosParamCreator(configuration).analyseUnHealthProportionGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AnalyseControllerApi - factory interface
 * @export
 */
export const AnalyseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 获取总结
         * @summary 获取总结
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyseGetsummaryGet(options?: any): AxiosPromise<Result> {
            return AnalyseControllerApiFp(configuration).analyseGetsummaryGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 计算健康用户的占比（判断没有疾病并且bmi正常）
         * @summary 计算健康用户的占比（判断没有疾病并且bmi正常）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyseHealthProportionGet(options?: any): AxiosPromise<Result> {
            return AnalyseControllerApiFp(configuration).analyseHealthProportionGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 健康省份的热门食物
         * @summary 健康省份的热门食物
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyseHotFoodByHealthProvinceGet(options?: any): AxiosPromise<Result> {
            return AnalyseControllerApiFp(configuration).analyseHotFoodByHealthProvinceGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 统计每天热门食物（后期才会有数据，现在暂时用月度热门前十替代，别忘了）
         * @summary 统计当天的热门食物
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyseHotFoodsByDayGet(options?: any): AxiosPromise<Result> {
            return AnalyseControllerApiFp(configuration).analyseHotFoodsByDayGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 统计本月前十名热门食物(数据的顺序就是排名，越往上的次数越多)
         * @summary 统计本月前十名热门食物
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyseHotFoodsByMonthGet(options?: any): AxiosPromise<Result> {
            return AnalyseControllerApiFp(configuration).analyseHotFoodsByMonthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 统计本年前十名热门食物(数据的顺序就是排名，越往上的次数越多)
         * @summary 统计本年前十名热门食物
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyseHotFoodsByYearGet(options?: any): AxiosPromise<Result> {
            return AnalyseControllerApiFp(configuration).analyseHotFoodsByYearGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 统计月度健康用户的热门食物
         * @summary 统计月度健康用户的热门食物
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyseMonthlyHealthFoodsGet(options?: any): AxiosPromise<Result> {
            return AnalyseControllerApiFp(configuration).analyseMonthlyHealthFoodsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 计算每个省的平均营养值
         * @summary 计算每个省的平均营养值
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyseProvinceGet(options?: any): AxiosPromise<Result> {
            return AnalyseControllerApiFp(configuration).analyseProvinceGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 计算非健康用户的占比（患病或BMI不正常）
         * @summary 计算非健康用户的占比（患病或BMI不正常）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyseUnHealthProportionGet(options?: any): AxiosPromise<Result> {
            return AnalyseControllerApiFp(configuration).analyseUnHealthProportionGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnalyseControllerApi - object-oriented interface
 * @export
 * @class AnalyseControllerApi
 * @extends {BaseAPI}
 */
export class AnalyseControllerApi extends BaseAPI {
    /**
     * 获取总结
     * @summary 获取总结
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyseControllerApi
     */
    public analyseGetsummaryGet(options?: any) {
        return AnalyseControllerApiFp(this.configuration).analyseGetsummaryGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 计算健康用户的占比（判断没有疾病并且bmi正常）
     * @summary 计算健康用户的占比（判断没有疾病并且bmi正常）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyseControllerApi
     */
    public analyseHealthProportionGet(options?: any) {
        return AnalyseControllerApiFp(this.configuration).analyseHealthProportionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 健康省份的热门食物
     * @summary 健康省份的热门食物
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyseControllerApi
     */
    public analyseHotFoodByHealthProvinceGet(options?: any) {
        return AnalyseControllerApiFp(this.configuration).analyseHotFoodByHealthProvinceGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 统计每天热门食物（后期才会有数据，现在暂时用月度热门前十替代，别忘了）
     * @summary 统计当天的热门食物
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyseControllerApi
     */
    public analyseHotFoodsByDayGet(options?: any) {
        return AnalyseControllerApiFp(this.configuration).analyseHotFoodsByDayGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 统计本月前十名热门食物(数据的顺序就是排名，越往上的次数越多)
     * @summary 统计本月前十名热门食物
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyseControllerApi
     */
    public analyseHotFoodsByMonthGet(options?: any) {
        return AnalyseControllerApiFp(this.configuration).analyseHotFoodsByMonthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 统计本年前十名热门食物(数据的顺序就是排名，越往上的次数越多)
     * @summary 统计本年前十名热门食物
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyseControllerApi
     */
    public analyseHotFoodsByYearGet(options?: any) {
        return AnalyseControllerApiFp(this.configuration).analyseHotFoodsByYearGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 统计月度健康用户的热门食物
     * @summary 统计月度健康用户的热门食物
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyseControllerApi
     */
    public analyseMonthlyHealthFoodsGet(options?: any) {
        return AnalyseControllerApiFp(this.configuration).analyseMonthlyHealthFoodsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 计算每个省的平均营养值
     * @summary 计算每个省的平均营养值
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyseControllerApi
     */
    public analyseProvinceGet(options?: any) {
        return AnalyseControllerApiFp(this.configuration).analyseProvinceGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 计算非健康用户的占比（患病或BMI不正常）
     * @summary 计算非健康用户的占比（患病或BMI不正常）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyseControllerApi
     */
    public analyseUnHealthProportionGet(options?: any) {
        return AnalyseControllerApiFp(this.configuration).analyseUnHealthProportionGet(options).then((request) => request(this.axios, this.basePath));
    }

}
