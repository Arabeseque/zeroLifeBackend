// tslint:disable
/**
 * 健康助手后台
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LoginVo } from '../models';
// @ts-ignore
import { PasswordVo } from '../models';
// @ts-ignore
import { RegisterVo } from '../models';
// @ts-ignore
import { Result } from '../models';
/**
 * AdminControllerApi - axios parameter creator
 * @export
 */
export const AdminControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 管理员登录
         * @summary 管理员登录
         * @param {LoginVo} [loginVo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminLoginPost: async (loginVo?: LoginVo, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof loginVo !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginVo !== undefined ? loginVo : {}) : (loginVo || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 用户登出
         * @summary 用户登出
         * @param {string} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminLogoutAdminIdGet: async (adminId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            if (adminId === null || adminId === undefined) {
                throw new RequiredError('adminId','Required parameter adminId was null or undefined when calling adminLogoutAdminIdGet.');
            }
            const localVarPath = `/admin/logout/{adminId}`
                .replace(`{${"adminId"}}`, encodeURIComponent(String(adminId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 修改密码
         * @summary 修改密码
         * @param {PasswordVo} [passwordVo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPasswordPut: async (passwordVo?: PasswordVo, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/password`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof passwordVo !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(passwordVo !== undefined ? passwordVo : {}) : (passwordVo || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 管理员注册
         * @summary 管理员注册
         * @param {RegisterVo} [registerVo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRegisterPost: async (registerVo?: RegisterVo, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof registerVo !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(registerVo !== undefined ? registerVo : {}) : (registerVo || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminControllerApi - functional programming interface
 * @export
 */
export const AdminControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 管理员登录
         * @summary 管理员登录
         * @param {LoginVo} [loginVo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminLoginPost(loginVo?: LoginVo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await AdminControllerApiAxiosParamCreator(configuration).adminLoginPost(loginVo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 用户登出
         * @summary 用户登出
         * @param {string} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminLogoutAdminIdGet(adminId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await AdminControllerApiAxiosParamCreator(configuration).adminLogoutAdminIdGet(adminId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 修改密码
         * @summary 修改密码
         * @param {PasswordVo} [passwordVo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPasswordPut(passwordVo?: PasswordVo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await AdminControllerApiAxiosParamCreator(configuration).adminPasswordPut(passwordVo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 管理员注册
         * @summary 管理员注册
         * @param {RegisterVo} [registerVo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminRegisterPost(registerVo?: RegisterVo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Result>> {
            const localVarAxiosArgs = await AdminControllerApiAxiosParamCreator(configuration).adminRegisterPost(registerVo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AdminControllerApi - factory interface
 * @export
 */
export const AdminControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 管理员登录
         * @summary 管理员登录
         * @param {LoginVo} [loginVo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminLoginPost(loginVo?: LoginVo, options?: any): AxiosPromise<Result> {
            return AdminControllerApiFp(configuration).adminLoginPost(loginVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 用户登出
         * @summary 用户登出
         * @param {string} adminId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminLogoutAdminIdGet(adminId: string, options?: any): AxiosPromise<Result> {
            return AdminControllerApiFp(configuration).adminLogoutAdminIdGet(adminId, options).then((request) => request(axios, basePath));
        },
        /**
         * 修改密码
         * @summary 修改密码
         * @param {PasswordVo} [passwordVo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPasswordPut(passwordVo?: PasswordVo, options?: any): AxiosPromise<Result> {
            return AdminControllerApiFp(configuration).adminPasswordPut(passwordVo, options).then((request) => request(axios, basePath));
        },
        /**
         * 管理员注册
         * @summary 管理员注册
         * @param {RegisterVo} [registerVo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRegisterPost(registerVo?: RegisterVo, options?: any): AxiosPromise<Result> {
            return AdminControllerApiFp(configuration).adminRegisterPost(registerVo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminControllerApi - object-oriented interface
 * @export
 * @class AdminControllerApi
 * @extends {BaseAPI}
 */
export class AdminControllerApi extends BaseAPI {
    /**
     * 管理员登录
     * @summary 管理员登录
     * @param {LoginVo} [loginVo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public adminLoginPost(loginVo?: LoginVo, options?: any) {
        return AdminControllerApiFp(this.configuration).adminLoginPost(loginVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 用户登出
     * @summary 用户登出
     * @param {string} adminId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public adminLogoutAdminIdGet(adminId: string, options?: any) {
        return AdminControllerApiFp(this.configuration).adminLogoutAdminIdGet(adminId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 修改密码
     * @summary 修改密码
     * @param {PasswordVo} [passwordVo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public adminPasswordPut(passwordVo?: PasswordVo, options?: any) {
        return AdminControllerApiFp(this.configuration).adminPasswordPut(passwordVo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 管理员注册
     * @summary 管理员注册
     * @param {RegisterVo} [registerVo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public adminRegisterPost(registerVo?: RegisterVo, options?: any) {
        return AdminControllerApiFp(this.configuration).adminRegisterPost(registerVo, options).then((request) => request(this.axios, this.basePath));
    }

}
